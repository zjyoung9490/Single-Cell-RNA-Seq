library(harmony)
library(Nebulosa)
library(Seurat)
library(rPanglaoDB)


# Get a list of the data available from the Panglao database
samplesList <- getSampleList()

# Make a list of genes expected to be involved in Alzheimers
az_genes <- c("APOE", "APP", "PLD3", "PICALM", "PSEN1", "PSEN2", "SORL1", "TREM2")

# Make a list of genes expected to be involved in Parkinsons 
pk_genes <- c("SNCA", "LRRK2", "PINK1", "DJ1", "APT13A2", "PLA2G6", "FBXO7", "UCHL1", "GIGYF2", "HTRA2", "EIF4G1", "GBA", "MAPT", "BST1", "PARK16", "GAK", "HLA")


# The data to examine will be a cortex sample from mus musculus
# Get data from Panglao
seurat <- getSamples(srs = "SRS2532371")


# First we will run the data through a series of processing steps
seurat <- SubsetData(seurat, ident.remove = c("Endothelial cells", "Fibroblasts"))
seurat <- NormalizeData(seurat)
seurat <- FindVariableFeatures(seurat)
seurat <- ScaleData(seurat)
seurat <- RunPCA(seurat, verbose = FALSE)
seurat <- RunHarmony(seurat, group.by.vars = 'orig.ident')
seurat <- FindNeighbors(seurat, reduction = 'harmony')
seurat <- FindClusters(seurat, resolution = 0.6)
seurat <- RunTSNE(seurat, reduction = 'harmony')
seurat <- RunUMAP(seurat, dims = 1:5)


# Now Lets examine features of the dataset a little bit
# First will get a sense of the structure of the data

# Look at the cell types present
ncol(x = seurat) # number of cells
nrow(x = seurat) # number of features/genes
table(seurat[[]]$CellTypes)
par(mar = c(8, 8, 2, 2))
barplot(table(seurat[[]]$CellTypes), xlab = "Cell Type", las = 2)

# Histograms of the Gene Counts per cell and UMIs per cell
hist(seurat@meta.data$nCount_RNA, breaks = 50, col = "blue", main = "Histogram of Total Gene Counts per Cell")
hist(seurat@meta.data$nFeature_RNA, breaks = 50, col = "orange", main = "Histogram of Unique Gene Counts per Cell (UMIs)")


# Scatter plot comparing RNA counts to feature counts
FeatureScatter(object = seurat, group.by = "CellTypes", feature1 = "nCount_RNA", feature2 = "nFeature_RNA")


# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(seurat), 10)
top10

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(seurat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0)
plot2


# Now lets begin visualizing the gene expression data
# First we will look at how the data was clustered in regards to the different cell types 
DimPlot(seurat, reduction = "pca", group.by = "CellTypes")
DimPlot(seurat, reduction = "tsne", group.by = "CellTypes")
DimPlot(seurat, reduction = "umap", group.by = "CellTypes")


# Now look at feature plots to examine how the expression for certain genes is different between clusters
Nebulosa::plot_density(seurat, features = pk_genes[1:3], joint = TRUE)
Nebulosa::plot_density(seurat, features = az_genes[1:3], joint = TRUE)

FeaturePlot(object = seurat, features = c("APP", "SORL1", "PLD3", "PICALM"), cols = c("lightgrey", "blue"), reduction ="tsne")
FeaturePlot(object = seurat, features = c("APOE", "TREM2", "PSEN1", "PSEN2"), cols = c("lightgrey", "blue"), reduction ="tsne")


# One way to look at differential expression is with a heatmap
# Here we find the top 20 most variable expressed genes and compare their expression in the cell types
top20 <- TopFeatures(seurat)
DoHeatmap(seurat, features = top20, group.by = "CellTypes")


# Another way to examine differentially expressed genes between cell types is with Violin Plots
# Here we will examine the genes involved in Alzheimers
VlnPlot(object = seurat, features = "APP", group.by = "CellTypes")
VlnPlot(object = seurat, features = "PLD3", group.by = "CellTypes")
VlnPlot(object = seurat, features = "PICALM", group.by = "CellTypes")
VlnPlot(object = seurat, features = "SORL1", group.by = "CellTypes")
VlnPlot(object = seurat, features = "APOE", group.by = "CellTypes")
VlnPlot(object = seurat, features = "TREM2", group.by = "CellTypes")
VlnPlot(object = seurat, features = "PSEN1", group.by = "CellTypes")
VlnPlot(object = seurat, features = "PSEN2", group.by = "CellTypes")


# A more efficient way to look through the expression level of genes would be to make some Shiny applications
# Below are apps where we can look at both the Alzheimer's and Parkinson's genes more interactively

##===Shiny Application: Violin Plot======================================================================================================================
library(shiny)
library(plyr)

ui <- fluidPage(
  titlePanel("Violin Plot"),
  sidebarLayout(
    sidebarPanel(
      selectInput('Gene', 'Gene', c(az_genes, pk_genes)),
    ),
    mainPanel(plotOutput("plot1")),
  )
)


server <- function(input, output) {
  output$plot1 <- renderPlot({
    VlnPlot(object = seurat, features = input$Gene, group.by = "CellTypes")})
}

shinyApp(ui = ui, server = server) 


##===Shiny Application: Feature Plots========================================================================================================================
ui <- fluidPage(
  titlePanel("Feature Plot"),
  sidebarLayout(
    sidebarPanel(
      selectInput('Gene', 'Gene', c(az_genes, pk_genes)),
      selectInput('Reduction', 'Reduction', c("pca", "tsne", "umap")),
    ),
    mainPanel(
      fluidRow(
        splitLayout(cellWidths = c("50%", "50%"), plotOutput("plot1"), plotOutput("plot2"))
        )
    ),
  )
)


server <- function(input, output) {
  output$plot1 <- renderPlot({
    DimPlot(seurat, reduction = input$Reduction, group.by = "CellTypes")})
  output$plot2 <- renderPlot({
    Nebulosa::plot_density(seurat, features = input$Gene, reduction = input$Reduction)})
}

shinyApp(ui = ui, server = server) 
